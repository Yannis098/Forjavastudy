伴随多态的可互换对象：

在处理类型的层次结构的时候，通常把一个对象不当作其特定种类的对象来对待，而是将其当作其基类的对象来对待

这样人们可以编写出不依赖特定类型的代码。基类中的方法应当可以在面对特定种类对象的时候执行，并且清楚的知道应当执行哪一步分的代码

比如说，现在有一个几何形的基类，其中有一个方法draw（）。现在创建一个导出类circle继承基类几何形。那么新类型中应当也有draw方法。

比如说代码：

dosomething(Shape shape)
{
shape.erase();
shape.draw();

}	

Circle circle=new Circle();
Triangle triangle=new Triangle();

dosomething(circle);
dosomething(triangle);

这个时候执行到下面代码的时候，dosomething不会将circle或者是triangle当作特定的对象去做，而是将它们当作最普通的shape来做。

既然你是shape，那么你应当可以进行erase（）和draw（）。那么你就去做吧，但要注意某些细节（执行特定的代码）。

要实现这一机制，我们必须考虑另外一种问题：即编译器如何知道我们同样名字的函数究竟要执行哪一部分的代码呢？

一个非面向对象编程的编译器会有前期绑定的概念――编译器产生一个对具体名字的函数的调用的时候，运行时将这个调用解析到将要执行的

代码的绝对地址。  换言之，一个draw（）函数只能有一种方法，不管你是circle还是triangle，所调用的代码的绝对地址应该是相同的。

这就无法产生多态性质的函数。在面向对象编程的过程中，我们要解决这个最根本的问题使用了后期绑定的概念。

编译器直到运行到被调用方法的时候才会知道将要运行哪一部分的代码。这就确保了多态可以正常的在OOP中发挥作用。